// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_final_fields, public_member_api_docs, prefer_single_quotes, omit_local_variable_types, unnecessary_this

import 'dart:async';

import 'package:flutter/material.dart';

/// A  class generated by flappy_translator package containing localized strings
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get generalNo => _getText('generalNo');

  static String get generalYes => _getText('generalYes');

  static String get generalShogiNotation => _getText('generalShogiNotation');

  static String get onboardingPage1Headline =>
      _getText('onboardingPage1Headline');

  static String get onboardingPage1Label1 => _getText('onboardingPage1Label1');

  static String get onboardingPage1Label2 => _getText('onboardingPage1Label2');

  static String get onboardingPage1Label3 => _getText('onboardingPage1Label3');

  static String get onboardingPage1Label4 => _getText('onboardingPage1Label4');

  static String get onboardingPage2Headline =>
      _getText('onboardingPage2Headline');

  static String get onboardingPage2Label1 => _getText('onboardingPage2Label1');

  static String get onboardingPage3Headline =>
      _getText('onboardingPage3Headline');

  static String get onboardingPage3ContinueButtonText =>
      _getText('onboardingPage3ContinueButtonText');

  static String get darkModePanelText => _getText('darkModePanelText');

  static String get pieceSymbolPanelText => _getText('pieceSymbolPanelText');

  static String get dataPrivacyPanelLabel11 =>
      _getText('dataPrivacyPanelLabel11');

  static String get dataPrivacyPanelLabel12 =>
      _getText('dataPrivacyPanelLabel12');

  static String get dataPrivacyPanelLabel13 =>
      _getText('dataPrivacyPanelLabel13');

  static String get dataPrivacyPanelLabel2 =>
      _getText('dataPrivacyPanelLabel2');

  static String get developerPanelLabel11 => _getText('developerPanelLabel11');

  static String get developerPanelLabel12 => _getText('developerPanelLabel12');

  static String get developerPanelLabel13 => _getText('developerPanelLabel13');

  static String get developerPanelLabel14 => _getText('developerPanelLabel14');

  static String get developerPanelLabel15 => _getText('developerPanelLabel15');

  static String get shogiNotationPage1Headline =>
      _getText('shogiNotationPage1Headline');

  static String get shogiNotationPage1Label1 =>
      _getText('shogiNotationPage1Label1');

  static String get shogiNotationPage1Label2 =>
      _getText('shogiNotationPage1Label2');

  static String get shogiNotationPage2Headline =>
      _getText('shogiNotationPage2Headline');

  static String get shogiNotationPage2Label1 =>
      _getText('shogiNotationPage2Label1');

  static String get shogiNotationPage2Label2 =>
      _getText('shogiNotationPage2Label2');

  static String get shogiNotationPage3Headline =>
      _getText('shogiNotationPage3Headline');

  static String get shogiNotationPage3Label1 =>
      _getText('shogiNotationPage3Label1');

  static String get shogiNotationPage3Label2 =>
      _getText('shogiNotationPage3Label2');

  static String get shogiNotationPage3Label3 =>
      _getText('shogiNotationPage3Label3');

  static String get shogiNotationPage3Label4 =>
      _getText('shogiNotationPage3Label4');

  static String get shogiNotationPage4Headline =>
      _getText('shogiNotationPage4Headline');

  static String get shogiNotationPage4Label1 =>
      _getText('shogiNotationPage4Label1');

  static String get shogiNotationPage4Label2 =>
      _getText('shogiNotationPage4Label2');

  static String get homeScreenSearchHintText =>
      _getText('homeScreenSearchHintText');

  static String get homeScreenProversTabTitleText =>
      _getText('homeScreenProversTabTitleText');

  static String get homeScreenSettingsTabTitleText =>
      _getText('homeScreenSettingsTabTitleText');

  static String get askSeenTutorialPopupTitle =>
      _getText('askSeenTutorialPopupTitle');

  static String get askSeenTutorialPopupDescription =>
      _getText('askSeenTutorialPopupDescription');

  static String get proverbsTabNoResultsText =>
      _getText('proverbsTabNoResultsText');

  static String get settingsTabDataPrivacyButtonText =>
      _getText('settingsTabDataPrivacyButtonText');

  static String get settingsTabCreditsButtonText =>
      _getText('settingsTabCreditsButtonText');

  static String get settingsTabAboutButtonText =>
      _getText('settingsTabAboutButtonText');

  static String get dataPrivacyPopupTitle => _getText('dataPrivacyPopupTitle');

  static String get creditsPopupTitle => _getText('creditsPopupTitle');

  static String get creditsPopupLabel1 => _getText('creditsPopupLabel1');

  static String get creditsPopupLabel21 => _getText('creditsPopupLabel21');

  static String get creditsPopupLabel22 => _getText('creditsPopupLabel22');

  static String get creditsPopupLabel23 => _getText('creditsPopupLabel23');

  static String get creditsPopupLabel31 => _getText('creditsPopupLabel31');

  static String get creditsPopupLabel32 => _getText('creditsPopupLabel32');

  static String get creditsPopupLabel33 => _getText('creditsPopupLabel33');

  static String get proverbTypepieces => _getText('proverbTypepieces');

  static String get proverbTypeopening => _getText('proverbTypeopening');

  static String get proverbTypemiddle => _getText('proverbTypemiddle');

  static String get proverbTypeend => _getText('proverbTypeend');

  static String get proverbTypeother => _getText('proverbTypeother');

  static String proverbDetailsAppBarTitle({
    @required int index,
  }) {
    String _text = _getText('proverbDetailsAppBarTitle');
    if (index != null) {
      _text = _text.replaceAll('%index\$d', index.toString());
    }
    return _text;
  }

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': 'Shogi Proverbs',
    'generalNo': 'No',
    'generalYes': 'Yes',
    'generalShogiNotation': 'Shogi Notation',
    'onboardingPage1Headline': 'Introduction',
    'onboardingPage1Label1':
        'Shogi (将棋) is a two-player strategy board game native to Japan, belonging to the same family as chess and xiangqi.',
    'onboardingPage1Label2':
        'Shogi proverbs are technical tips for the player to lead them in the right direction when they are unsure of what move to play. This app contains 50 such proverbs for beginner to intermediate players.',
    'onboardingPage1Label3':
        'These proverbs are taken from Takako Tombo Noda\'s website, which in turn contains translations of Masahiko Urano\'s book Shogi Kakugen Mame Jiten (Tiny dictionary of Shogi proverbs). Although this website is still online, it is not optimized for mobile, while the diagrams can be difficult to decipher.',
    'onboardingPage1Label4':
        'The goal of this open source project is to make this excellent content more accessible to beginners in the mobile age, and it is assumed that neither Mr. Noda nor Mr. Urano would not support this goal. No copyright infringement is intended.',
    'onboardingPage2Headline': 'Personalizing your experience',
    'onboardingPage2Label1':
        'These settings can be updated anytime in the settings menu.',
    'onboardingPage3Headline': 'Data privacy',
    'onboardingPage3ContinueButtonText': 'Continue',
    'darkModePanelText': 'Dark Mode',
    'pieceSymbolPanelText': 'Piece Symbol',
    'dataPrivacyPanelLabel11':
        'By using this application, you agree to the terms and conditions stated in the ',
    'dataPrivacyPanelLabel12': 'privacy policy',
    'dataPrivacyPanelLabel13': '.',
    'dataPrivacyPanelLabel2':
        'No data is collected on how you use the app, nor is any data sent onto third parties.',
    'developerPanelLabel11': 'Developed with ',
    'developerPanelLabel12': '\u2764',
    'developerPanelLabel13': ' in Berlin. ',
    'developerPanelLabel14': 'Source code',
    'developerPanelLabel15': '.',
    'shogiNotationPage1Headline': 'Shogi board',
    'shogiNotationPage1Label1':
        'The shogi board contains 9 x 9 squares, which are labeled horizontally leftwards by 1 - 9 and vertically downwards by a - i.',
    'shogiNotationPage1Label2':
        'Thus square 1a is the upper leftmost square, while 9i is the bottom rightmost square.',
    'shogiNotationPage2Headline': 'Shogi pieces',
    'shogiNotationPage2Label1':
        'Although Black and White\'s pieces are displayed on the board with upper case (K) and lower case (k) letters respectively, this has no bearing on the move notation which is always capitalized.',
    'shogiNotationPage2Label2':
        'The following pieces are often refered to by their Japanese names:',
    'shogiNotationPage3Headline': 'Game moves',
    'shogiNotationPage3Label1':
        'Game moves are denoted using the following notation:',
    'shogiNotationPage3Label2':
        'Player is denoted by ☗ for black and ☖ for white.',
    'shogiNotationPage3Label3':
        'Movement is denoted by -, x and * for simple movement, capture and drop, respectively.',
    'shogiNotationPage3Label4':
        'If a move entitles the player to promote their piece, then promotion is denoted by +, while declined promotion is denoted by =. ',
    'shogiNotationPage4Headline': 'Example',
    'shogiNotationPage4Label1':
        'Lets put all this into practice with a simple example. Diagram 1 shows the initial game board:',
    'shogiNotationPage4Label2':
        'Diagram 2 shows the resulting game board after the following moves:',
    'homeScreenSearchHintText': 'Search...',
    'homeScreenProversTabTitleText': 'Proverbs',
    'homeScreenSettingsTabTitleText': 'Settings',
    'askSeenTutorialPopupTitle': 'Shogi notation tutorial',
    'askSeenTutorialPopupDescription':
        'Before reading your first proverb, would you like to view a short tutorial on shogi notation?',
    'proverbsTabNoResultsText': 'No proverbs found.',
    'settingsTabDataPrivacyButtonText': 'Data Privacy',
    'settingsTabCreditsButtonText': 'Credits',
    'settingsTabAboutButtonText': 'About',
    'dataPrivacyPopupTitle': 'Data privacy',
    'creditsPopupTitle': 'Credits',
    'creditsPopupLabel1': 'Concept, Design and Programming by James Leahy.',
    'creditsPopupLabel21': 'All proverbs are taken from Takako Tombo Noda\'s ',
    'creditsPopupLabel22': 'website',
    'creditsPopupLabel23':
        ', which in turn contains translations of Masahiko Urano\'s book Shogi Kakugen Mame Jiten (Tiny dictionary of Shogi proverbs).',
    'creditsPopupLabel31': 'Special thanks to ',
    'creditsPopupLabel32': 'takodori ',
    'creditsPopupLabel33':
        ' whose Shogi Playground diagrams greatly aided in the quick integration of board diagrams.',
    'proverbTypepieces': 'Individual pieces',
    'proverbTypeopening': 'Opening',
    'proverbTypemiddle': 'Middlegame',
    'proverbTypeend': 'Endgame',
    'proverbTypeother': 'Other',
    'proverbDetailsAppBarTitle': 'Proverb %index\$d',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
