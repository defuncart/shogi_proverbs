// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_final_fields, public_member_api_docs

import 'dart:async';

import 'package:flutter/material.dart';

/// A  class generated by flappy_translator package containing localized strings
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get onboardingPage1Headline =>
      _getText('onboardingPage1Headline');

  static String get onboardingPage1Label1 => _getText('onboardingPage1Label1');

  static String get onboardingPage1Label2 => _getText('onboardingPage1Label2');

  static String get onboardingPage1Label3 => _getText('onboardingPage1Label3');

  static String get onboardingPage1Label4 => _getText('onboardingPage1Label4');

  static String get onboardingPage1Label5 => _getText('onboardingPage1Label5');

  static String get onboardingPage2Headline =>
      _getText('onboardingPage2Headline');

  static String get onboardingPage2Label1 => _getText('onboardingPage2Label1');

  static String get onboardingPage3Headline =>
      _getText('onboardingPage3Headline');

  static String get onboardingPage3ContinueButtonText =>
      _getText('onboardingPage3ContinueButtonText');

  static String get darkModePanelText => _getText('darkModePanelText');

  static String get pieceSymbolPanelText => _getText('pieceSymbolPanelText');

  static String get dataPrivacyPanelLabel11 =>
      _getText('dataPrivacyPanelLabel11');

  static String get dataPrivacyPanelLabel12 =>
      _getText('dataPrivacyPanelLabel12');

  static String get dataPrivacyPanelLabel13 =>
      _getText('dataPrivacyPanelLabel13');

  static String get dataPrivacyPanelLabel2 =>
      _getText('dataPrivacyPanelLabel2');

  static String get developerPanelLabel11 => _getText('developerPanelLabel11');

  static String get developerPanelLabel12 => _getText('developerPanelLabel12');

  static String get developerPanelLabel13 => _getText('developerPanelLabel13');

  static String get developerPanelLabel14 => _getText('developerPanelLabel14');

  static String get developerPanelLabel15 => _getText('developerPanelLabel15');

  static String get homeScreenProversTabTitleText =>
      _getText('homeScreenProversTabTitleText');

  static String get homeScreenSettingsTabTitleText =>
      _getText('homeScreenSettingsTabTitleText');

  static String get settingsTabPrivacyPolicyButtonText =>
      _getText('settingsTabPrivacyPolicyButtonText');

  static String get settingsTabAboutButtonText =>
      _getText('settingsTabAboutButtonText');

  static String get aboutPopupText1 => _getText('aboutPopupText1');

  static String get aboutPopupText2 => _getText('aboutPopupText2');

  static String get aboutPopupText3 => _getText('aboutPopupText3');

  static String get proverbTypepawn => _getText('proverbTypepawn');

  static String get proverbTypelance => _getText('proverbTypelance');

  static String get proverbTypeknight => _getText('proverbTypeknight');

  static String get proverbTypesilver => _getText('proverbTypesilver');

  static String get proverbTypegold => _getText('proverbTypegold');

  static String get proverbTypebishop => _getText('proverbTypebishop');

  static String get proverbTypehorse => _getText('proverbTypehorse');

  static String get proverbTypedragon => _getText('proverbTypedragon');

  static String get proverbTypetokin => _getText('proverbTypetokin');

  static String get proverbTypeopening => _getText('proverbTypeopening');

  static String get proverbTypemiddle => _getText('proverbTypemiddle');

  static String get proverbTypeend => _getText('proverbTypeend');

  static String get proverbTypeother => _getText('proverbTypeother');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': 'Shogi Proverbs',
    'onboardingPage1Headline': 'Introduction',
    'onboardingPage1Label1':
        'Shogi (将棋) is a two-player strategy board game native to Japan, belonging to the same family as chess and xiangqi.',
    'onboardingPage1Label2':
        'Shogi proverbs are technical tips for the player to lead them in the right direction when they are unsure of what move to play.',
    'onboardingPage1Label3':
        'This app contains 50 such proverbs for beginner to intermediate players. These proverbs are taken from Takako Tombo Noda\'s website, which in turn contains translations of Masahiko Urano\'s book Shogi Kakugen Mame Jiten (Tiny dictionary of Shogi proverbs).',
    'onboardingPage1Label4':
        'Although this website is still online, it is not optimized for mobile and the diagrams can be difficult to dephicer. Thus the goal of this mobile application is to make this excellent content more accessible to beginners in 2020.',
    'onboardingPage1Label5':
        'It is assumed that neither Mr. Noda nor Mr. Urano would have anything against this open source project. No copyright infringement is intended.',
    'onboardingPage2Headline': 'Personalizing your experience',
    'onboardingPage2Label1':
        'These settings can be updated anytime in the settings menu.',
    'onboardingPage3Headline': 'Data privacy',
    'onboardingPage3ContinueButtonText': 'Continue',
    'darkModePanelText': 'Dark Mode',
    'pieceSymbolPanelText': 'Piece Symbol',
    'dataPrivacyPanelLabel11':
        'By using this application, you agree to the terms and conditions stated in the ',
    'dataPrivacyPanelLabel12': 'privacy policy',
    'dataPrivacyPanelLabel13': '.',
    'dataPrivacyPanelLabel2':
        'No data is collected on how you use the app, nor is any data sent onto third parties.',
    'developerPanelLabel11': 'Developed with ',
    'developerPanelLabel12': '\u2764',
    'developerPanelLabel13': ' in Berlin. ',
    'developerPanelLabel14': 'Source code',
    'developerPanelLabel15': '.',
    'homeScreenProversTabTitleText': 'Proverbs',
    'homeScreenSettingsTabTitleText': 'Settings',
    'settingsTabPrivacyPolicyButtonText': 'PrivacyPolicy',
    'settingsTabAboutButtonText': 'About',
    'aboutPopupText1': 'Concept, Design and Programming by James Leahy.',
    'aboutPopupText2':
        'All content is taken from Takako Tombo Noda\'s website, which in turn contains translations of Masahiko Urano\'s book Shogi Kakugen Mame Jiten (Tiny dictionary of Shogi proverbs).',
    'aboutPopupText3':
        'Special thanks to takodori whose Shogi Playground diagrams greatly aided in the quick integration of board diagrams.',
    'proverbTypepawn': 'Pawn',
    'proverbTypelance': 'Lance',
    'proverbTypeknight': 'Knight',
    'proverbTypesilver': 'Silver',
    'proverbTypegold': 'Gold',
    'proverbTypebishop': 'Bishop',
    'proverbTypehorse': 'Horse',
    'proverbTypedragon': 'Dragon',
    'proverbTypetokin': 'Tokin',
    'proverbTypeopening': 'Opening',
    'proverbTypemiddle': 'Middlegame',
    'proverbTypeend': 'Endgame',
    'proverbTypeother': 'Other',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
