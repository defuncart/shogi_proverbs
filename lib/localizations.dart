// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_final_fields, public_member_api_docs

import 'dart:async';

import 'package:flutter/material.dart';

/// A  class generated by flappy_translator package containing localized strings
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get homeScreenProversTabTitleText =>
      _getText('homeScreenProversTabTitleText');

  static String get homeScreenSettingsTabTitleText =>
      _getText('homeScreenSettingsTabTitleText');

  static String get settingsTabDarkModeLabel =>
      _getText('settingsTabDarkModeLabel');

  static String get settingsTabPieceLanguageLabel =>
      _getText('settingsTabPieceLanguageLabel');

  static String get settingsTabShowCoordIndicatorsLabel =>
      _getText('settingsTabShowCoordIndicatorsLabel');

  static String get settingsTabCoordIndicatorTypeLabel =>
      _getText('settingsTabCoordIndicatorTypeLabel');

  static String get settingsTabAboutButtonText =>
      _getText('settingsTabAboutButtonText');

  static String get aboutPopupText1 => _getText('aboutPopupText1');

  static String get aboutPopupText2 => _getText('aboutPopupText2');

  static String get aboutPopupText3 => _getText('aboutPopupText3');

  static String get proverbTypepawn => _getText('proverbTypepawn');

  static String get proverbTypelance => _getText('proverbTypelance');

  static String get proverbTypeknight => _getText('proverbTypeknight');

  static String get proverbTypesilver => _getText('proverbTypesilver');

  static String get proverbTypegold => _getText('proverbTypegold');

  static String get proverbTypebishop => _getText('proverbTypebishop');

  static String get proverbTypehorse => _getText('proverbTypehorse');

  static String get proverbTypedragon => _getText('proverbTypedragon');

  static String get proverbTypetokin => _getText('proverbTypetokin');

  static String get proverbTypeopening => _getText('proverbTypeopening');

  static String get proverbTypemiddle => _getText('proverbTypemiddle');

  static String get proverbTypeend => _getText('proverbTypeend');

  static String get proverbTypeother => _getText('proverbTypeother');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': 'Shogi Proverbs',
    'homeScreenProversTabTitleText': 'Proverbs',
    'homeScreenSettingsTabTitleText': 'Settings',
    'settingsTabDarkModeLabel': 'Dark Mode',
    'settingsTabPieceLanguageLabel': 'Piece Language',
    'settingsTabShowCoordIndicatorsLabel': 'Show Coordinate Indicators',
    'settingsTabCoordIndicatorTypeLabel': 'Coordinate Indicator',
    'settingsTabAboutButtonText': 'About',
    'aboutPopupText1': 'Concept, Design and Programming by James Leahy.',
    'aboutPopupText2':
        'All content is taken from Takako Tombo Noda\'s website, which in turn contains translations of Masahiko Urano\'s book Shogi Kakugen Mame Jiten (Tiny dictionary of Shogi proverbs).',
    'aboutPopupText3':
        'Special thanks to takodori whose Shogi Playground diagrams greatly aided in the quick integration of board diagrams.',
    'proverbTypepawn': 'Pawn',
    'proverbTypelance': 'lance',
    'proverbTypeknight': 'Knight',
    'proverbTypesilver': 'Silver',
    'proverbTypegold': 'Gold',
    'proverbTypebishop': 'Bishop',
    'proverbTypehorse': 'Horse',
    'proverbTypedragon': 'Dragon',
    'proverbTypetokin': 'Tokin',
    'proverbTypeopening': 'Opening',
    'proverbTypemiddle': 'Middlegame',
    'proverbTypeend': 'Endgame',
    'proverbTypeother': 'Other',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
